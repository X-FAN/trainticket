package com.xf.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xf.greendao.Station;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION".
*/
public class StationDao extends AbstractDao<Station, Void> {

    public static final String TABLENAME = "STATION";

    /**
     * Properties of entity Station.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StationName = new Property(0, String.class, "stationName", false, "STATION_NAME");
        public final static Property StationCode = new Property(1, String.class, "stationCode", false, "STATION_CODE");
        public final static Property FullPY = new Property(2, String.class, "fullPY", false, "FULL_PY");
        public final static Property ShortPY = new Property(3, String.class, "shortPY", false, "SHORT_PY");
        public final static Property Section = new Property(4, String.class, "section", false, "SECTION");
        public final static Property IsShow = new Property(5, Boolean.class, "isShow", false, "IS_SHOW");
    };


    public StationDao(DaoConfig config) {
        super(config);
    }
    
    public StationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION\" (" + //
                "\"STATION_NAME\" TEXT," + // 0: stationName
                "\"STATION_CODE\" TEXT," + // 1: stationCode
                "\"FULL_PY\" TEXT," + // 2: fullPY
                "\"SHORT_PY\" TEXT," + // 3: shortPY
                "\"SECTION\" TEXT," + // 4: section
                "\"IS_SHOW\" INTEGER);"); // 5: isShow
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Station entity) {
        stmt.clearBindings();
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(1, stationName);
        }
 
        String stationCode = entity.getStationCode();
        if (stationCode != null) {
            stmt.bindString(2, stationCode);
        }
 
        String fullPY = entity.getFullPY();
        if (fullPY != null) {
            stmt.bindString(3, fullPY);
        }
 
        String shortPY = entity.getShortPY();
        if (shortPY != null) {
            stmt.bindString(4, shortPY);
        }
 
        String section = entity.getSection();
        if (section != null) {
            stmt.bindString(5, section);
        }
 
        Boolean isShow = entity.getIsShow();
        if (isShow != null) {
            stmt.bindLong(6, isShow ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Station readEntity(Cursor cursor, int offset) {
        Station entity = new Station( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // stationName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stationCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fullPY
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortPY
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // section
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isShow
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Station entity, int offset) {
        entity.setStationName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStationCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFullPY(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortPY(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSection(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsShow(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Station entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Station entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
